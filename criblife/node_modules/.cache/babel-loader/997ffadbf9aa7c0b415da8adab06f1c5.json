{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jianying Chiang\\\\Documents\\\\GitHub\\\\CribLife\\\\criblife\\\\src\\\\components\\\\map\\\\mapWithMarkers.jsx\";\nimport React, { Component } from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport \"./mapWithMarkers.scss\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nconst defaultMapOptions = {\n  zoomControl: true,\n  mapTypeControl: false,\n  scaleControl: false,\n  streetViewControl: false,\n  rotateControl: false,\n  fullscreenControl: false\n};\nconst MapWithMarkers = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvaYrU3bnm60a1X4gyhULxiO-5gqhVi48&libraries=geometry,drawing,places\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })\n}), withScriptjs, withGoogleMap)(props => React.createElement(GoogleMap, {\n  options: defaultMapOptions,\n  defaultZoom: 13,\n  defaultCenter: {\n    lat: 42.357064,\n    lng: -71.062577\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(MarkerWithInfoWindow, {\n  position: {\n    lat: 42.3381437,\n    lng: -71.0475773\n  },\n  content: \"$750\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}), React.createElement(MarkerWithInfoWindow, {\n  position: {\n    lat: 42.3875968,\n    lng: -71.0994968\n  },\n  content: \"$234\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}), React.createElement(\"div\", {\n  className: \"floating-panel\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, \"asdf\")));\n\nclass MarkerWithInfoWindow extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isSelected: false\n    };\n    this.onToggleSelection = this.onToggleSelection.bind(this);\n  }\n\n  onToggleSelection() {\n    this.setState({\n      isSelected: !this.state.isSelected\n    });\n\n    if (this.state.isSelected === true) {\n      this.setState({\n        color: \"blue\"\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(Marker, {\n      position: this.props.position,\n      onClick: this.onToggleSelection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(InfoWindow, {\n      onCloseClick: this.onToggleSelection,\n      style: {\n        background: this.state.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        background: this.state.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.props.content)));\n  }\n\n}\n\nexport default MapWithMarkers; // MapContainer = GoogleApiWrapper({\n//   apiKey: \"AIzaSyBvaYrU3bnm60a1X4gyhULxiO-5gqhVi48\"\n// })(MapContainer);","map":{"version":3,"sources":["C:/Users/Jianying Chiang/Documents/GitHub/CribLife/criblife/src/components/map/mapWithMarkers.jsx"],"names":["React","Component","compose","withProps","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","defaultMapOptions","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","MapWithMarkers","googleMapURL","loadingElement","height","containerElement","mapElement","props","lat","lng","MarkerWithInfoWindow","constructor","state","isSelected","onToggleSelection","bind","setState","color","render","position","background","content"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { compose, withProps } from \"recompose\";\r\nimport \"./mapWithMarkers.scss\";\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow\r\n} from \"react-google-maps\";\r\n\r\nconst defaultMapOptions = {\r\n  zoomControl: true,\r\n  mapTypeControl: false,\r\n  scaleControl: false,\r\n  streetViewControl: false,\r\n  rotateControl: false,\r\n  fullscreenControl: false\r\n};\r\n\r\nconst MapWithMarkers = compose(\r\n  withProps({\r\n    googleMapURL:\r\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBvaYrU3bnm60a1X4gyhULxiO-5gqhVi48&libraries=geometry,drawing,places\",\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `100%` }} />,\r\n    mapElement: <div style={{ height: `100%` }} />\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props => (\r\n  <GoogleMap\r\n    options={defaultMapOptions}\r\n    defaultZoom={13}\r\n    defaultCenter={{ lat: 42.357064, lng: -71.062577 }}\r\n  >\r\n    <MarkerWithInfoWindow\r\n      position={{ lat: 42.3381437, lng: -71.0475773 }}\r\n      content=\"$750\"\r\n    />\r\n    <MarkerWithInfoWindow\r\n      position={{ lat: 42.3875968, lng: -71.0994968 }}\r\n      content=\"$234\"\r\n    />\r\n    <div className=\"floating-panel\">asdf</div>\r\n  </GoogleMap>\r\n));\r\n\r\nclass MarkerWithInfoWindow extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isSelected: false\r\n    };\r\n    this.onToggleSelection = this.onToggleSelection.bind(this);\r\n  }\r\n\r\n  onToggleSelection() {\r\n    this.setState({\r\n      isSelected: !this.state.isSelected\r\n    });\r\n    if (this.state.isSelected === true) {\r\n      this.setState({\r\n        color: \"blue\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Marker position={this.props.position} onClick={this.onToggleSelection}>\r\n        <InfoWindow\r\n          onCloseClick={this.onToggleSelection}\r\n          style={{ background: this.state.color }}\r\n        >\r\n          <h3 style={{ background: this.state.color }}>{this.props.content}</h3>\r\n        </InfoWindow>\r\n      </Marker>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapWithMarkers;\r\n\r\n// MapContainer = GoogleApiWrapper({\r\n//   apiKey: \"AIzaSyBvaYrU3bnm60a1X4gyhULxiO-5gqhVi48\"\r\n// })(MapContainer);\r\n"]},"metadata":{},"sourceType":"module"}